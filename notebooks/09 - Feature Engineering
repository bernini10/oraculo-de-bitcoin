{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d9ced67f-f3a7-4b17-85a4-719bc404de6d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DataFrame carregado com sucesso!\n",
      "Dimensões: (8640, 4)\n",
      "Amostra dos dados originais:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>buy_volume</th>\n",
       "      <th>sell_volume</th>\n",
       "      <th>trade_count</th>\n",
       "      <th>buy_ratio</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2025-06-22 00:00:00</th>\n",
       "      <td>2.979756e+07</td>\n",
       "      <td>2.588840e+07</td>\n",
       "      <td>132458</td>\n",
       "      <td>0.535100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-22 00:15:00</th>\n",
       "      <td>3.049017e+07</td>\n",
       "      <td>2.260168e+07</td>\n",
       "      <td>115061</td>\n",
       "      <td>0.574291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-22 00:30:00</th>\n",
       "      <td>3.316883e+07</td>\n",
       "      <td>2.243503e+07</td>\n",
       "      <td>120027</td>\n",
       "      <td>0.596520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-22 00:45:00</th>\n",
       "      <td>1.224840e+07</td>\n",
       "      <td>1.541325e+07</td>\n",
       "      <td>53760</td>\n",
       "      <td>0.442794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-22 01:00:00</th>\n",
       "      <td>1.075487e+07</td>\n",
       "      <td>1.137878e+07</td>\n",
       "      <td>50717</td>\n",
       "      <td>0.485906</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       buy_volume   sell_volume  trade_count  buy_ratio\n",
       "time                                                                   \n",
       "2025-06-22 00:00:00  2.979756e+07  2.588840e+07       132458   0.535100\n",
       "2025-06-22 00:15:00  3.049017e+07  2.260168e+07       115061   0.574291\n",
       "2025-06-22 00:30:00  3.316883e+07  2.243503e+07       120027   0.596520\n",
       "2025-06-22 00:45:00  1.224840e+07  1.541325e+07        53760   0.442794\n",
       "2025-06-22 01:00:00  1.075487e+07  1.137878e+07        50717   0.485906"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Novas features criadas com sucesso!\n",
      "Amostra do DataFrame com as novas features:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>buy_volume</th>\n",
       "      <th>sell_volume</th>\n",
       "      <th>trade_count</th>\n",
       "      <th>buy_ratio</th>\n",
       "      <th>buy_ratio_sma_12</th>\n",
       "      <th>buy_ratio_ema_12</th>\n",
       "      <th>buy_ratio_sma_26</th>\n",
       "      <th>buy_ratio_ema_26</th>\n",
       "      <th>buy_ratio_zscore_50</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2025-06-22 12:15:00</th>\n",
       "      <td>5.158123e+06</td>\n",
       "      <td>5.576452e+06</td>\n",
       "      <td>17639</td>\n",
       "      <td>0.480515</td>\n",
       "      <td>0.444918</td>\n",
       "      <td>0.472266</td>\n",
       "      <td>0.428978</td>\n",
       "      <td>0.453874</td>\n",
       "      <td>0.289257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-22 12:30:00</th>\n",
       "      <td>2.397837e+06</td>\n",
       "      <td>6.011440e+06</td>\n",
       "      <td>15873</td>\n",
       "      <td>0.285142</td>\n",
       "      <td>0.437228</td>\n",
       "      <td>0.443478</td>\n",
       "      <td>0.423524</td>\n",
       "      <td>0.441375</td>\n",
       "      <td>-1.693556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-22 12:45:00</th>\n",
       "      <td>5.238842e+06</td>\n",
       "      <td>7.806309e+06</td>\n",
       "      <td>13338</td>\n",
       "      <td>0.401593</td>\n",
       "      <td>0.447831</td>\n",
       "      <td>0.437034</td>\n",
       "      <td>0.422582</td>\n",
       "      <td>0.438428</td>\n",
       "      <td>-0.456046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-22 13:00:00</th>\n",
       "      <td>9.184373e+06</td>\n",
       "      <td>2.306729e+07</td>\n",
       "      <td>29395</td>\n",
       "      <td>0.284772</td>\n",
       "      <td>0.438005</td>\n",
       "      <td>0.413609</td>\n",
       "      <td>0.421307</td>\n",
       "      <td>0.427046</td>\n",
       "      <td>-1.621302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-22 13:15:00</th>\n",
       "      <td>2.449767e+07</td>\n",
       "      <td>5.342369e+07</td>\n",
       "      <td>118834</td>\n",
       "      <td>0.314390</td>\n",
       "      <td>0.430597</td>\n",
       "      <td>0.398345</td>\n",
       "      <td>0.415747</td>\n",
       "      <td>0.418701</td>\n",
       "      <td>-1.260689</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       buy_volume   sell_volume  trade_count  buy_ratio  \\\n",
       "time                                                                      \n",
       "2025-06-22 12:15:00  5.158123e+06  5.576452e+06        17639   0.480515   \n",
       "2025-06-22 12:30:00  2.397837e+06  6.011440e+06        15873   0.285142   \n",
       "2025-06-22 12:45:00  5.238842e+06  7.806309e+06        13338   0.401593   \n",
       "2025-06-22 13:00:00  9.184373e+06  2.306729e+07        29395   0.284772   \n",
       "2025-06-22 13:15:00  2.449767e+07  5.342369e+07       118834   0.314390   \n",
       "\n",
       "                     buy_ratio_sma_12  buy_ratio_ema_12  buy_ratio_sma_26  \\\n",
       "time                                                                        \n",
       "2025-06-22 12:15:00          0.444918          0.472266          0.428978   \n",
       "2025-06-22 12:30:00          0.437228          0.443478          0.423524   \n",
       "2025-06-22 12:45:00          0.447831          0.437034          0.422582   \n",
       "2025-06-22 13:00:00          0.438005          0.413609          0.421307   \n",
       "2025-06-22 13:15:00          0.430597          0.398345          0.415747   \n",
       "\n",
       "                     buy_ratio_ema_26  buy_ratio_zscore_50  \n",
       "time                                                        \n",
       "2025-06-22 12:15:00          0.453874             0.289257  \n",
       "2025-06-22 12:30:00          0.441375            -1.693556  \n",
       "2025-06-22 12:45:00          0.438428            -0.456046  \n",
       "2025-06-22 13:00:00          0.427046            -1.621302  \n",
       "2025-06-22 13:15:00          0.418701            -1.260689  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Estatísticas descritivas das novas features:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>buy_ratio_sma_12</th>\n",
       "      <th>buy_ratio_ema_12</th>\n",
       "      <th>buy_ratio_zscore_50</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>8591.000000</td>\n",
       "      <td>8591.000000</td>\n",
       "      <td>8591.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.478555</td>\n",
       "      <td>0.478541</td>\n",
       "      <td>0.000990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.053494</td>\n",
       "      <td>0.052095</td>\n",
       "      <td>1.011734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.282929</td>\n",
       "      <td>0.290977</td>\n",
       "      <td>-3.048319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.443890</td>\n",
       "      <td>0.444614</td>\n",
       "      <td>-0.730331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.478201</td>\n",
       "      <td>0.478339</td>\n",
       "      <td>-0.027757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.512910</td>\n",
       "      <td>0.511675</td>\n",
       "      <td>0.713770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>0.688531</td>\n",
       "      <td>0.685603</td>\n",
       "      <td>3.290641</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       buy_ratio_sma_12  buy_ratio_ema_12  buy_ratio_zscore_50\n",
       "count       8591.000000       8591.000000          8591.000000\n",
       "mean           0.478555          0.478541             0.000990\n",
       "std            0.053494          0.052095             1.011734\n",
       "min            0.282929          0.290977            -3.048319\n",
       "25%            0.443890          0.444614            -0.730331\n",
       "50%            0.478201          0.478339            -0.027757\n",
       "75%            0.512910          0.511675             0.713770\n",
       "max            0.688531          0.685603             3.290641"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# CÉLULA 1: CARREGAR DADOS E CRIAR FEATURES DE 'BUY_RATIO'\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# --- Carregar os Dados ---\n",
    "# Define o caminho para o ficheiro que guardámos no notebook anterior\n",
    "data_path = 'user_data/data/binance/trades_agg_90d_BTCUSDT.parquet'\n",
    "df = pd.read_parquet(data_path)\n",
    "\n",
    "print(\"DataFrame carregado com sucesso!\")\n",
    "print(f\"Dimensões: {df.shape}\")\n",
    "print(\"Amostra dos dados originais:\")\n",
    "display(df.head())\n",
    "\n",
    "# --- Engenharia de Features ---\n",
    "\n",
    "# 1. Médias Móveis da 'buy_ratio'\n",
    "# Usamos períodos comuns em análise técnica para começar\n",
    "df['buy_ratio_sma_12'] = df['buy_ratio'].rolling(window=12).mean()\n",
    "df['buy_ratio_ema_12'] = df['buy_ratio'].ewm(span=12, adjust=False).mean()\n",
    "df['buy_ratio_sma_26'] = df['buy_ratio'].rolling(window=26).mean()\n",
    "df['buy_ratio_ema_26'] = df['buy_ratio'].ewm(span=26, adjust=False).mean()\n",
    "\n",
    "# 2. Z-Score da 'buy_ratio'\n",
    "# Mede quantos desvios padrão a 'buy_ratio' atual está da sua média móvel de 50 períodos\n",
    "rolling_mean = df['buy_ratio'].rolling(window=50).mean()\n",
    "rolling_std = df['buy_ratio'].rolling(window=50).std()\n",
    "df['buy_ratio_zscore_50'] = (df['buy_ratio'] - rolling_mean) / rolling_std\n",
    "\n",
    "# --- Verificação ---\n",
    "# Remove os valores NaN gerados pelas janelas das médias móveis\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "print(\"\\nNovas features criadas com sucesso!\")\n",
    "print(\"Amostra do DataFrame com as novas features:\")\n",
    "display(df.head())\n",
    "\n",
    "print(\"\\nEstatísticas descritivas das novas features:\")\n",
    "display(df[['buy_ratio_sma_12', 'buy_ratio_ema_12', 'buy_ratio_zscore_50']].describe())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e43a5a91-54eb-4ebe-9054-3bbeab5ab233",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Novas features de aceleração e dominância criadas com sucesso!\n",
      "Amostra do DataFrame com as novas features:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>buy_ratio</th>\n",
       "      <th>trade_count</th>\n",
       "      <th>trade_count_accel</th>\n",
       "      <th>volume_dominance</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2025-06-22 12:15:00</th>\n",
       "      <td>0.480515</td>\n",
       "      <td>17639</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.038970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-22 12:30:00</th>\n",
       "      <td>0.285142</td>\n",
       "      <td>15873</td>\n",
       "      <td>-0.100119</td>\n",
       "      <td>-0.429716</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-22 12:45:00</th>\n",
       "      <td>0.401593</td>\n",
       "      <td>13338</td>\n",
       "      <td>-0.159705</td>\n",
       "      <td>-0.196814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-22 13:00:00</th>\n",
       "      <td>0.284772</td>\n",
       "      <td>29395</td>\n",
       "      <td>1.203854</td>\n",
       "      <td>-0.430456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-22 13:15:00</th>\n",
       "      <td>0.314390</td>\n",
       "      <td>118834</td>\n",
       "      <td>3.042660</td>\n",
       "      <td>-0.371221</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     buy_ratio  trade_count  trade_count_accel  \\\n",
       "time                                                             \n",
       "2025-06-22 12:15:00   0.480515        17639           0.000000   \n",
       "2025-06-22 12:30:00   0.285142        15873          -0.100119   \n",
       "2025-06-22 12:45:00   0.401593        13338          -0.159705   \n",
       "2025-06-22 13:00:00   0.284772        29395           1.203854   \n",
       "2025-06-22 13:15:00   0.314390       118834           3.042660   \n",
       "\n",
       "                     volume_dominance  \n",
       "time                                   \n",
       "2025-06-22 12:15:00         -0.038970  \n",
       "2025-06-22 12:30:00         -0.429716  \n",
       "2025-06-22 12:45:00         -0.196814  \n",
       "2025-06-22 13:00:00         -0.430456  \n",
       "2025-06-22 13:15:00         -0.371221  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Estatísticas descritivas das novas features:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>trade_count_accel</th>\n",
       "      <th>buy_volume_accel</th>\n",
       "      <th>sell_volume_accel</th>\n",
       "      <th>volume_dominance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>8591.000000</td>\n",
       "      <td>8591.000000</td>\n",
       "      <td>8591.000000</td>\n",
       "      <td>8591.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.105009</td>\n",
       "      <td>0.277353</td>\n",
       "      <td>0.244652</td>\n",
       "      <td>-0.042873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.659586</td>\n",
       "      <td>1.262100</td>\n",
       "      <td>1.154473</td>\n",
       "      <td>0.259345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-0.776531</td>\n",
       "      <td>-0.962875</td>\n",
       "      <td>-0.925621</td>\n",
       "      <td>-0.819389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-0.236105</td>\n",
       "      <td>-0.348178</td>\n",
       "      <td>-0.331037</td>\n",
       "      <td>-0.228021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>-0.032088</td>\n",
       "      <td>-0.012779</td>\n",
       "      <td>-0.014075</td>\n",
       "      <td>-0.049897</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.260087</td>\n",
       "      <td>0.501621</td>\n",
       "      <td>0.454447</td>\n",
       "      <td>0.139321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>19.429392</td>\n",
       "      <td>35.771464</td>\n",
       "      <td>32.441826</td>\n",
       "      <td>0.787448</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       trade_count_accel  buy_volume_accel  sell_volume_accel  \\\n",
       "count        8591.000000       8591.000000        8591.000000   \n",
       "mean            0.105009          0.277353           0.244652   \n",
       "std             0.659586          1.262100           1.154473   \n",
       "min            -0.776531         -0.962875          -0.925621   \n",
       "25%            -0.236105         -0.348178          -0.331037   \n",
       "50%            -0.032088         -0.012779          -0.014075   \n",
       "75%             0.260087          0.501621           0.454447   \n",
       "max            19.429392         35.771464          32.441826   \n",
       "\n",
       "       volume_dominance  \n",
       "count       8591.000000  \n",
       "mean          -0.042873  \n",
       "std            0.259345  \n",
       "min           -0.819389  \n",
       "25%           -0.228021  \n",
       "50%           -0.049897  \n",
       "75%            0.139321  \n",
       "max            0.787448  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# CÉLULA 2: FEATURES DE ACELERAÇÃO E DOMINÂNCIA\n",
    "\n",
    "# 3. Aceleração do Volume e Atividade\n",
    "# Usamos .pct_change() para calcular a variação percentual de uma vela para a outra.\n",
    "# Isto mede a \"aceleração\" ou \"desaceleração\" da atividade do mercado.\n",
    "df['trade_count_accel'] = df['trade_count'].pct_change()\n",
    "df['buy_volume_accel'] = df['buy_volume'].pct_change()\n",
    "df['sell_volume_accel'] = df['sell_volume'].pct_change()\n",
    "\n",
    "# 4. Dominância de Volume\n",
    "# Mede a diferença entre o volume de compra e venda como uma proporção do volume total.\n",
    "# O valor varia de -1 (dominância total de venda) a +1 (dominância total de compra).\n",
    "total_volume = df['buy_volume'] + df['sell_volume']\n",
    "df['volume_dominance'] = (df['buy_volume'] - df['sell_volume']) / total_volume\n",
    "\n",
    "# --- Verificação ---\n",
    "# O .pct_change() cria NaNs na primeira linha. Vamos preenchê-los com 0.\n",
    "# Também preenchemos possíveis divisões por zero na 'volume_dominance' se o volume total for 0.\n",
    "df.fillna(0, inplace=True)\n",
    "\n",
    "print(\"Novas features de aceleração e dominância criadas com sucesso!\")\n",
    "print(\"Amostra do DataFrame com as novas features:\")\n",
    "# Mostra as colunas novas e algumas das antigas para contexto\n",
    "display(df[['buy_ratio', 'trade_count', 'trade_count_accel', 'volume_dominance']].head())\n",
    "\n",
    "print(\"\\nEstatísticas descritivas das novas features:\")\n",
    "display(df[['trade_count_accel', 'buy_volume_accel', 'sell_volume_accel', 'volume_dominance']].describe())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ffad2ab4-d181-4a45-9152-4eb5c40f4037",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A descarregar dados de velas (OHLCV) diretamente da API da Binance...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/_h/bzklzp017rd0m7tqv52p2lym0000gn/T/ipykernel_13870/2272188261.py:37: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
      "  end_date = datetime.utcnow()\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  ... 1000 velas descarregadas, continuando a partir de 2025-07-03 14:45\n",
      "  ... 2000 velas descarregadas, continuando a partir de 2025-07-14 00:45\n",
      "  ... 3000 velas descarregadas, continuando a partir de 2025-07-24 10:45\n",
      "  ... 4000 velas descarregadas, continuando a partir de 2025-08-03 20:45\n",
      "  ... 5000 velas descarregadas, continuando a partir de 2025-08-14 06:45\n",
      "  ... 6000 velas descarregadas, continuando a partir de 2025-08-24 16:45\n",
      "  ... 7000 velas descarregadas, continuando a partir de 2025-09-04 02:45\n",
      "  ... 8000 velas descarregadas, continuando a partir de 2025-09-14 12:45\n",
      "  ... 8624 velas descarregadas, continuando a partir de 2025-09-21 00:45\n",
      "\n",
      "Download de 8624 velas concluído.\n",
      "\n",
      "Merge concluído com sucesso!\n",
      "Dimensões do DataFrame Final: (8524, 18)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>buy_volume</th>\n",
       "      <th>sell_volume</th>\n",
       "      <th>trade_count</th>\n",
       "      <th>buy_ratio</th>\n",
       "      <th>buy_ratio_sma_12</th>\n",
       "      <th>buy_ratio_ema_12</th>\n",
       "      <th>buy_ratio_sma_26</th>\n",
       "      <th>buy_ratio_ema_26</th>\n",
       "      <th>buy_ratio_zscore_50</th>\n",
       "      <th>trade_count_accel</th>\n",
       "      <th>buy_volume_accel</th>\n",
       "      <th>sell_volume_accel</th>\n",
       "      <th>volume_dominance</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2025-06-23 05:00:00</th>\n",
       "      <td>5.425570e+06</td>\n",
       "      <td>6.778204e+06</td>\n",
       "      <td>20440</td>\n",
       "      <td>0.444581</td>\n",
       "      <td>0.422153</td>\n",
       "      <td>0.391885</td>\n",
       "      <td>0.459449</td>\n",
       "      <td>0.433781</td>\n",
       "      <td>-0.261958</td>\n",
       "      <td>0.345002</td>\n",
       "      <td>1.463630</td>\n",
       "      <td>-0.231128</td>\n",
       "      <td>-0.110837</td>\n",
       "      <td>101168.00</td>\n",
       "      <td>101499.40</td>\n",
       "      <td>101167.99</td>\n",
       "      <td>101424.21</td>\n",
       "      <td>120.46112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-23 05:15:00</th>\n",
       "      <td>7.154379e+06</td>\n",
       "      <td>5.638925e+06</td>\n",
       "      <td>18728</td>\n",
       "      <td>0.559228</td>\n",
       "      <td>0.426582</td>\n",
       "      <td>0.417630</td>\n",
       "      <td>0.458407</td>\n",
       "      <td>0.443073</td>\n",
       "      <td>0.856417</td>\n",
       "      <td>-0.083757</td>\n",
       "      <td>0.318641</td>\n",
       "      <td>-0.168080</td>\n",
       "      <td>0.118457</td>\n",
       "      <td>101424.21</td>\n",
       "      <td>101538.08</td>\n",
       "      <td>101424.20</td>\n",
       "      <td>101514.80</td>\n",
       "      <td>126.05940</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-23 05:30:00</th>\n",
       "      <td>5.196421e+06</td>\n",
       "      <td>4.572778e+06</td>\n",
       "      <td>12982</td>\n",
       "      <td>0.531919</td>\n",
       "      <td>0.415872</td>\n",
       "      <td>0.435213</td>\n",
       "      <td>0.460331</td>\n",
       "      <td>0.449654</td>\n",
       "      <td>0.604616</td>\n",
       "      <td>-0.306813</td>\n",
       "      <td>-0.273673</td>\n",
       "      <td>-0.189069</td>\n",
       "      <td>0.063838</td>\n",
       "      <td>101514.79</td>\n",
       "      <td>101537.30</td>\n",
       "      <td>101467.33</td>\n",
       "      <td>101470.97</td>\n",
       "      <td>96.25143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-23 05:45:00</th>\n",
       "      <td>2.059286e+07</td>\n",
       "      <td>1.110232e+07</td>\n",
       "      <td>37352</td>\n",
       "      <td>0.649716</td>\n",
       "      <td>0.426486</td>\n",
       "      <td>0.468213</td>\n",
       "      <td>0.461450</td>\n",
       "      <td>0.464474</td>\n",
       "      <td>1.662109</td>\n",
       "      <td>1.877215</td>\n",
       "      <td>2.962893</td>\n",
       "      <td>1.427916</td>\n",
       "      <td>0.299432</td>\n",
       "      <td>101470.96</td>\n",
       "      <td>101890.00</td>\n",
       "      <td>101458.63</td>\n",
       "      <td>101771.02</td>\n",
       "      <td>311.52959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-23 06:00:00</th>\n",
       "      <td>1.687889e+07</td>\n",
       "      <td>6.835943e+06</td>\n",
       "      <td>26570</td>\n",
       "      <td>0.711744</td>\n",
       "      <td>0.444000</td>\n",
       "      <td>0.505679</td>\n",
       "      <td>0.465960</td>\n",
       "      <td>0.482790</td>\n",
       "      <td>2.097541</td>\n",
       "      <td>-0.288659</td>\n",
       "      <td>-0.180352</td>\n",
       "      <td>-0.384278</td>\n",
       "      <td>0.423488</td>\n",
       "      <td>101771.01</td>\n",
       "      <td>101998.96</td>\n",
       "      <td>101771.01</td>\n",
       "      <td>101949.00</td>\n",
       "      <td>232.67529</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       buy_volume   sell_volume  trade_count  buy_ratio  \\\n",
       "2025-06-23 05:00:00  5.425570e+06  6.778204e+06        20440   0.444581   \n",
       "2025-06-23 05:15:00  7.154379e+06  5.638925e+06        18728   0.559228   \n",
       "2025-06-23 05:30:00  5.196421e+06  4.572778e+06        12982   0.531919   \n",
       "2025-06-23 05:45:00  2.059286e+07  1.110232e+07        37352   0.649716   \n",
       "2025-06-23 06:00:00  1.687889e+07  6.835943e+06        26570   0.711744   \n",
       "\n",
       "                     buy_ratio_sma_12  buy_ratio_ema_12  buy_ratio_sma_26  \\\n",
       "2025-06-23 05:00:00          0.422153          0.391885          0.459449   \n",
       "2025-06-23 05:15:00          0.426582          0.417630          0.458407   \n",
       "2025-06-23 05:30:00          0.415872          0.435213          0.460331   \n",
       "2025-06-23 05:45:00          0.426486          0.468213          0.461450   \n",
       "2025-06-23 06:00:00          0.444000          0.505679          0.465960   \n",
       "\n",
       "                     buy_ratio_ema_26  buy_ratio_zscore_50  trade_count_accel  \\\n",
       "2025-06-23 05:00:00          0.433781            -0.261958           0.345002   \n",
       "2025-06-23 05:15:00          0.443073             0.856417          -0.083757   \n",
       "2025-06-23 05:30:00          0.449654             0.604616          -0.306813   \n",
       "2025-06-23 05:45:00          0.464474             1.662109           1.877215   \n",
       "2025-06-23 06:00:00          0.482790             2.097541          -0.288659   \n",
       "\n",
       "                     buy_volume_accel  sell_volume_accel  volume_dominance  \\\n",
       "2025-06-23 05:00:00          1.463630          -0.231128         -0.110837   \n",
       "2025-06-23 05:15:00          0.318641          -0.168080          0.118457   \n",
       "2025-06-23 05:30:00         -0.273673          -0.189069          0.063838   \n",
       "2025-06-23 05:45:00          2.962893           1.427916          0.299432   \n",
       "2025-06-23 06:00:00         -0.180352          -0.384278          0.423488   \n",
       "\n",
       "                          open       high        low      close     volume  \n",
       "2025-06-23 05:00:00  101168.00  101499.40  101167.99  101424.21  120.46112  \n",
       "2025-06-23 05:15:00  101424.21  101538.08  101424.20  101514.80  126.05940  \n",
       "2025-06-23 05:30:00  101514.79  101537.30  101467.33  101470.97   96.25143  \n",
       "2025-06-23 05:45:00  101470.96  101890.00  101458.63  101771.02  311.52959  \n",
       "2025-06-23 06:00:00  101771.01  101998.96  101771.01  101949.00  232.67529  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# CÉLULA 3 (VERSÃO CORRIGIDA): JUNTAR DADOS DE PREÇO (OHLCV) VIA API\n",
    "\n",
    "import requests\n",
    "import pandas as pd\n",
    "from datetime import datetime, timedelta\n",
    "\n",
    "# --- Parâmetros ---\n",
    "symbol = \"BTCUSDT\"\n",
    "timeframe = \"15m\"\n",
    "# O Pandas usa 'min' para minutos, a API da Binance usa 'm'\n",
    "api_timeframe = '15m' \n",
    "# Quantos dias de dados queremos\n",
    "DIAS_PARA_PROCESSAR = 90\n",
    "# A API da Binance limita a 1000 velas por pedido. Vamos calcular quantos pedidos fazer.\n",
    "# Velas por dia = (24 horas * 60 minutos) / 15 minutos = 96 velas/dia\n",
    "# Total de velas = 96 * 90 = 8640 velas\n",
    "# Total de pedidos = 8640 / 1000 (arredondado para cima) = 9 pedidos\n",
    "\n",
    "# --- Função para descarregar dados de velas ---\n",
    "def get_klines(symbol, timeframe, start_time, end_time):\n",
    "    \"\"\"Busca dados de velas (klines) da API da Binance.\"\"\"\n",
    "    url = \"https://api.binance.com/api/v3/klines\"\n",
    "    params = {\n",
    "        'symbol': symbol,\n",
    "        'interval': timeframe,\n",
    "        'startTime': int(start_time.timestamp( ) * 1000),\n",
    "        'endTime': int(end_time.timestamp() * 1000),\n",
    "        'limit': 1000\n",
    "    }\n",
    "    response = requests.get(url, params=params)\n",
    "    response.raise_for_status()\n",
    "    return response.json()\n",
    "\n",
    "# --- Loop para descarregar todos os dados necessários ---\n",
    "print(\"A descarregar dados de velas (OHLCV) diretamente da API da Binance...\")\n",
    "all_klines = []\n",
    "end_date = datetime.utcnow()\n",
    "start_date = end_date - timedelta(days=DIAS_PARA_PROCESSAR)\n",
    "\n",
    "# O loop vai buscar os dados em pedaços de 1000 velas\n",
    "current_start = start_date\n",
    "while current_start < end_date:\n",
    "    klines = get_klines(symbol, api_timeframe, current_start, end_date)\n",
    "    if not klines:\n",
    "        break # Sai do loop se não houver mais dados\n",
    "    \n",
    "    all_klines.extend(klines)\n",
    "    # O próximo pedido começa a partir da data da última vela recebida\n",
    "    current_start = pd.to_datetime(klines[-1][0], unit='ms') + timedelta(milliseconds=1)\n",
    "    print(f\"  ... {len(all_klines)} velas descarregadas, continuando a partir de {current_start.strftime('%Y-%m-%d %H:%M')}\")\n",
    "\n",
    "print(f\"\\nDownload de {len(all_klines)} velas concluído.\")\n",
    "\n",
    "# --- Carregar e Juntar os Dados ---\n",
    "# Constrói o DataFrame a partir dos dados da API\n",
    "df_ohlcv = pd.DataFrame(all_klines, columns=[\n",
    "    'date', 'open', 'high', 'low', 'close', 'volume', \n",
    "    'close_time', 'quote_asset_volume', 'number_of_trades', \n",
    "    'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'\n",
    "])\n",
    "\n",
    "# Seleciona apenas as colunas que nos interessam\n",
    "df_ohlcv = df_ohlcv[['date', 'open', 'high', 'low', 'close', 'volume']]\n",
    "# Converte os tipos de dados\n",
    "for col in ['open', 'high', 'low', 'close', 'volume']:\n",
    "    df_ohlcv[col] = pd.to_numeric(df_ohlcv[col])\n",
    "\n",
    "# Converte a coluna 'date' para datetime e define como índice\n",
    "df_ohlcv['date'] = pd.to_datetime(df_ohlcv['date'], unit='ms')\n",
    "df_ohlcv.set_index('date', inplace=True)\n",
    "\n",
    "# --- Merge dos DataFrames ---\n",
    "# Junta o nosso dataframe de features (df) com o de velas (df_ohlcv)\n",
    "df_final = pd.merge(df, df_ohlcv, left_index=True, right_index=True, how='inner')\n",
    "\n",
    "print(\"\\nMerge concluído com sucesso!\")\n",
    "print(f\"Dimensões do DataFrame Final: {df_final.shape}\")\n",
    "display(df_final.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6f1a89a3-d480-4036-9ed0-711b9630fba1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variável alvo 'target' criada com sucesso!\n",
      "\n",
      "Amostra do DataFrame com a coluna 'target':\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>close</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2025-06-23 05:00:00</th>\n",
       "      <td>101424.21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-23 05:15:00</th>\n",
       "      <td>101514.80</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-23 05:30:00</th>\n",
       "      <td>101470.97</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-23 05:45:00</th>\n",
       "      <td>101771.02</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-23 06:00:00</th>\n",
       "      <td>101949.00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-23 06:15:00</th>\n",
       "      <td>101844.87</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-23 06:30:00</th>\n",
       "      <td>101756.73</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-23 06:45:00</th>\n",
       "      <td>101940.27</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-23 07:00:00</th>\n",
       "      <td>101906.20</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06-23 07:15:00</th>\n",
       "      <td>101852.41</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         close  target\n",
       "2025-06-23 05:00:00  101424.21       0\n",
       "2025-06-23 05:15:00  101514.80       0\n",
       "2025-06-23 05:30:00  101470.97       0\n",
       "2025-06-23 05:45:00  101771.02       0\n",
       "2025-06-23 06:00:00  101949.00       0\n",
       "2025-06-23 06:15:00  101844.87       0\n",
       "2025-06-23 06:30:00  101756.73       0\n",
       "2025-06-23 06:45:00  101940.27       0\n",
       "2025-06-23 07:00:00  101906.20       0\n",
       "2025-06-23 07:15:00  101852.41       0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Distribuição da variável alvo:\n",
      "target\n",
      "0    0.881159\n",
      "1    0.118841\n",
      "Name: proportion, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# CÉLULA 4: CRIAÇÃO DA VARIÁVEL ALVO (TARGET)\n",
    "\n",
    "# --- Parâmetros da Variável Alvo ---\n",
    "# Horizonte de previsão: quantas velas olhamos para o futuro\n",
    "HORIZONTE = 5\n",
    "# Limite de lucro: qual a percentagem de subida que define um \"sucesso\"\n",
    "LIMITE_LUCRO = 0.005  # 0.5%\n",
    "\n",
    "# --- Cálculo da Variável Alvo ---\n",
    "\n",
    "# Calcula o preço máximo que será atingido nas próximas 'HORIZONTE' velas.\n",
    "# .shift(-HORIZONTE) \"puxa\" os dados do futuro para a linha atual.\n",
    "# .rolling(HORIZONTE) cria uma janela móvel sobre esses dados futuros.\n",
    "future_max_high = df_final['high'].shift(-HORIZONTE).rolling(window=HORIZONTE).max()\n",
    "\n",
    "# Define a condição de sucesso: o preço máximo futuro é maior que o preço de fecho atual + a margem de lucro?\n",
    "success_condition = (future_max_high > df_final['close'] * (1 + LIMITE_LUCRO))\n",
    "\n",
    "# Cria a coluna 'target'. Será 1 se a condição for verdadeira, e 0 se for falsa.\n",
    "df_final['target'] = np.where(success_condition, 1, 0)\n",
    "\n",
    "# --- Verificação ---\n",
    "# Remove as últimas linhas que terão NaN no alvo (pois não há futuro para elas)\n",
    "df_final.dropna(inplace=True)\n",
    "\n",
    "# Calcula a distribuição do alvo. Idealmente, não deve ser muito desequilibrada.\n",
    "target_distribution = df_final['target'].value_counts(normalize=True)\n",
    "\n",
    "print(\"Variável alvo 'target' criada com sucesso!\")\n",
    "print(\"\\nAmostra do DataFrame com a coluna 'target':\")\n",
    "# Mostra colunas relevantes para verificar a lógica\n",
    "display(df_final[['close', 'target']].head(10))\n",
    "\n",
    "print(\"\\nDistribuição da variável alvo:\")\n",
    "print(target_distribution)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f40469e-3d7c-4117-be43-dc03e2ed06df",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
